---
layout: post
title:  "소프트웨어 장인정신 이야기 1장 2장"
date:   2024-03-26 00:00:00 +0900
categories: 
---
![800x800](../assets/img/blog/cleanCraftsmanship1.jpeg "image1")

세상의 여러 장인들

소프트웨어 장인 정신 이야기 책을 동료들과 읽고 있습니다. 책의 내용을 일목요연하게 정리하는 것은 아니고, 읽고 간단히 제 생각을 적는 시간을 가져볼까 합니다. 사람들은 살아가면서 많은 사람들을 만납니다. 회사에서 같이 일을 하는 동료, 자주 가는 카페의 알바생, 집 앞 빵집 사장님 등 각자의 자리에서 사람들은 각자의 일을 하며 살아갑니다. 우리는 그 사람이 일하는 모습을 보며 여러가지 생각을 갖습니다. 자기가 하는 일에 자부심이 있어 보인다. 자신감이 있다. 활기차다. 피곤해보인다. 지루해보인다 대충한다 등

우리를 기분 좋게 하는 태도가 있고, 우리가 인상 쓰게 되는 사람도 있습니다.
저는 집 앞 빵집을 자주 가는데요, 거기 사장의 빵은 정말 맛있습니다. 그리고 갈때 마다 열심을 다해 어떻게 만들었는지 설명을 해주십니다. 저는 그런 사장님의 모습을 보며 더 자주 찾게 되고 신뢰를 얻게 됩니다.

![800x800](../assets/img/blog/cleanCraftsmanship2.jpeg "image1")


또 한번은 일본에 여행갔을때 일입니다. 지하철 화장실에 들어갔는데 청소아주머니께서 남자 소변기를 청소하고 계섰습니다. 제가 놀랐던건 땅에 털썩 앉으셔서 꼼꼼히 닦는 모습이였습니다. 대충 서서 긴 솔로 슥슥 닦으면 되는것인데, 그 아주머니는 앉아서 손걸래같은걸로 열심히 닦고 계신것을 봤습니다. 그것을 보며 일에 대한 태도가 얼마나 중요한지, 사람이 바라보는 모습이 어떻게 변화되는지 느낄 수 있었습니다. 저는 그 분을 앞으로도 잊을 수 없을 것 같습니다. 그 분은 특별한 기술은 없을 지라도 그 분은 누가 봐도 장인이라는 말이 아깝지 않을 것 같습니다. 그러면서 저는 나의 자리에서 그 분과 같이 일을 하려면 어떻게 해야하는 것일까? 란 생각을 품으며 그 화장실을 나왔습니다.

사실 위의 사례들에서 저는 그러한 사람들을 닮고 싶다는 생각을 갖게 되었습니다. 자기 일에 대한 자부심이 있고 태도가 정말 진심인 사람들이 주는 영향력이 크다는 것을 느꼈습니다. 이 책은 그러한 저에게 이렇게 하면 된다 라는 것을 알려주는 책이였습니다. 사실 이 책을 읽기 전까지는 어떻게 하면 위와 같은 분들의 태도와 마음을 닮을 수 있을까 라는 생각이였다면, 이 책을 읽으며 태도가 방식을 만들 뿐 아니라 방식이 태도를 만들수도 있겠구나 라고 생각했습니다.

어쩌면 그 일본의 청소하시는 아주머니도 어떠한 방식을 정해놓으셨을지 모르겠습니다. 소변기를 닦을때 물을 뿌리고, 솔로 한번 닦고 마지막은 수건으로 마무리한다 라는 이러한 일련의 규칙을 만드셨던거죠 그러한 스스로의 방식을 지키며 일을 하는 모습을 보며 저는 장인이라고 생각했지 않았을까? 라는 생각이 들었습니다.

장인이 되는 방법
이 책은 장인이 되는 방법으로는 규율, 기준, 윤리를 세우고 그것을 지키며 일 하는것이 장인되는 길이라고 말합니다. 장인이 되기 위해서는 좋은 교육과 많은 경험이 필요한데, 소프트웨어 산업은 최근까지도 둘 다 매우 부족한 상태였다고 합니다. 프로그래머들은 오랫동안 프로그래머로 남아있지 않고 관리직으로 변하게 되고 그 결과 대부분의 프로그래머는 한 번도 자신의 기술을 정의할 수도 있는 규율, 기준, 윤리를 배워본 적이 없다고 합니다. 여기서 규율 이란 일련의 규칙들을 의미합니다. 규율은 본질적인 부분과 임의적인 부분으로 나눌 수 있는데, 본질적인 부분은 규율에 권위 부여하고 규율이 존재하는 이유이고 임의적인 부분은 규율에 형태와 실체 부여 합니다.

저자가 제시하는 규율은 삶의 순환-론 제프리즈: 익스트림 프로그래밍 실천 방법에 따라 아래 5가지 입니다. 

![800x800](../assets/img/blog/lifeCycle.png "image1")


- 테스트 주도 개발
- 리팩터링
- 단순한 설계
- 짝 프로그래밍(공동 프로그래밍)
- 인수 테스트

테스트 주도 개발

저자가 제시하는 핵심 규율. TDD가 없다면 다른 규율은 지키기 어렵거나 지켜 봐야 의미가 없다고 합니다. 모든 규율은 TDD를 실천 함으로써 달성할 수 있습니다. 우리의 목표는 전적으로 신뢰하는 테스트 묶음을 만드는 것이다. 코드가 테스트 묶음을 통과한다면 마음 편히 배포할 수 있도록 테스트코드가 있어야 한다. 사실 software라는 의미는 부드러운 제품, 즉 변경이 용이한 제품이라는 뜻인데 사실 변경이 용이하지 않은것이 역설이란게 참 공감이 갔습니다. 어디 하나를 고치려해도 영향범위를 따지고, 그 영향범위 때문에 원인을 수정하는것이 아니라 현상만 수정하는 경험이 다들 있으셨을 것입니다. 그래서 저자는 맘 편히 수정할 수 있는 테스트 코드가 존재 해야 한다고 말합니다.

리팩토링

깨끗한 코드를 쓰도록 하는 규율. “동작을 바꾸지 않으면서” 형편없는 구조를 가진 코드를 더 나은 구조의 코드로 고치는 규율입니다. 동작을 바꾸지 않는게 보장되면 구조를 개선해도 안전합니다. 안전함을 확신하면서 코드를 정리할 방법이 있다면 우리는 코드를 정리할 것이고 시스템도 썩지 않을 것이다. 이러한 수정을 가능하게 하는것이 TDD입니다.

단순한 설계

단순한 설계는 리팩터링이 없다면 거의 불가능합니다. 단순한 설계는 리팩터링의 최종 목표입니다. 단순한 설계의 목표는 프로그램이나 시스템, 애플리케이션의 더 큰 구조에 잘 들어맞도록 단순하고 아주 작은 단위로 설계하는 것입니다. 사실 저는 복잡하게 설계하고 그것을 설명하는 다이어그램을 작성했던 적이 있습니다. 다이어그램을 작성하면서 뭔가 멋있는것 같고 이 복잡한 것을 내가 잘 표현했다 라는 뿌듯함도 느꼈었는데 중요한것은 복잡한 시스템을 만들지 않는 것이 더 중요하다고 깨달았습니다. 나중에 제가 봐도 잘 이해가 안가고 흐름을 따라가기 바빴습니다. 그래서 단순한 설계가 중요하단것을 꺠달았습니다. 변경이 용이해야 하니까요

공동 프로그래밍

소프트웨어 팀에서 함께 일하는 규율이자 기술. 짝 프로그래밍, 몹 프로그래밍(짝 프로그래밍을 1:n으로 확장. n은 개발팀 전원), 코드 리뷰,브레인스토밍 같은것이 하부 규율이 포함됩니다. 다른 규율에 비해 제일 기술적이지도 않고 지시사항도 제일 적지만 가장 중요할 수 있습니다. 효과적인 팀을 꾸리는 일은 흔히 경험할 수 없고 소중한 일이기 때문입니다. 사실 우리가 혼자 만들 수 있는 제품은 한계가 있습니다. 결국 다른 사람들과 협업 해야 하고 함께 개발 해야 합니다. 그랬을때 위에서 제시한 규율이 나 혼자만 지키고 있으면 좋은 제품을 만들기 어려울 것입니다. 결국 팀원 모두가 공감대를 가져야 하고 함께 노력해야 합니다. 그래서 더 장인이 되기 어려운게 아닐까싶습니다 ㅎ; 나 혼자만 잘해서가 아니라 팀원들의 공감대도 맞추고 잘 이끌어야 하기 때문이죠.

인수 테스트 소프트웨어 개발 팀을 사업과 묶어 주는 규율. 시스템이 동작해야 하는 방식을 사업 목표로 명시합니다. 이런 동작 방식은 테스트로 코딩하여 표현합니다. 테스트가 통과하면 시스템이 명시한 대로 동작하는 것입니다. 인수 테스트는 사업 부서를 대표하는 사람이 읽고 쓸 수 있어야 합니다. 사업 부서는 인수테스트를 쓰고 읽고 통과하는 것을 확인함으로써 소프트웨어가 무엇을 하는지 그리고 사업 부서에 필요한 일을 하는지 알 수 있게 됩니다.

위와 같은 규율을 설명하고 있는데 결국 핵심은 TDD로 부터 시작되어서 책은 TDD의 진행 방식을 설명합니다. 앞으로 계속 읽으면서 정리를 해보겠습니다 감사합니다~